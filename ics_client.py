# -*- coding: utf-8 -*-
"""client.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W5lq-SVFz89s2PZNECt5jtWfAFSoH64h
"""

import socket
import json
import wave
import simpleaudio as sa
import math

def int_to_byte(num):
  byt=[]
  for i in range(8):
    byt.append(0)

  i=7

  while(num>0):
    
    byt[i]=num%2
    num=int(num/2)  
    i=i-1
  
  return byt

def byte_to_int(byt):
  num=0
  for i in range(8):
    num=num+math.pow(2,7-i)*byt[i]

  return int(num)

def convert_to_bits(all_bytes):
  bits=[]
  for byt in all_bytes:
    for b in byt:
      bits.append(b)

  return bits

def new_bytes(bits):
  t=0
  all_bytes=[]

  while(t<256):
    all_bytes.append(bits[t:t+8])
    t=t+8
  
  return all_bytes

def d_block(bits,stkey1,stkey2):

  data1=bits[0:32]
  data2=bits[32:64]

  for i in range(16):

    tmp=data1
    data1=data2
    data2=tmp

    for j in range(32):
      data1[j]=data1[j]^stkey1[15-i][j]
    for j in range(32):
      data2[j]=data2[j]^stkey2[15-i][j]

  dec=[]
  for i in range(32):
    dec.append(data1[i])

  for i in range(32):
    dec.append(data2[i])
  
  return dec

def decrypt(bits,stkey1,stkey2):

  block1=d_block(bits[0:64],stkey1,stkey2)
  block2=d_block(bits[64:64*2],stkey1,stkey2)
  block3=d_block(bits[64*2:64*3],stkey1,stkey2)
  block4=d_block(bits[64*3:64*4],stkey1,stkey2)

  decrypted_bits=[]

  for i in range(64):
    decrypted_bits.append(block1[i])

  for i in range(64):
    decrypted_bits.append(block2[i])
  
  for i in range(64):
    decrypted_bits.append(block3[i])

  for i in range(64):
    decrypted_bits.append(block4[i])

  
  return decrypted_bits

HOST = '127.0.0.1'  # Standard loopback interface address (localhost)
PORT = 65432


s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((HOST,PORT))
s.send(b'send the audio file')
frame_modified=s.recv(1072948)        
s.close()

song=wave.open("s1.wav",mode='rb')
with wave.open('song_embed.wav', 'wb') as fd:
    fd.setparams(song.getparams())
    fd.writeframes(frame_modified) 

new_song=wave.open("song_embed.wav",mode='rb')
frame_bytes=bytearray(list(new_song.readframes(new_song.getnframes())))
print(len(frame_bytes))

print(frame_bytes[2])

stkey1=[]
stkey2=[]

f=open("key1.txt", "r")

f1=f.readlines()

for x in f1:
	key=[]
	for i in range(len(x)-1):
		key.append(ord(x[i])-ord('0'))
	stkey1.append(key)

print(len(stkey1[0]))
print(len(stkey1))

f=open("key2.txt", "r")

f1=f.readlines()

for x in f1:
	key=[]
	for i in range(len(x)-1):
		key.append(ord(x[i])-ord('0'))
	stkey2.append(key)

print(len(stkey2[0]))
print(len(stkey2))

enc_bits=[]
t=0

for i in range(256):
  tmp_byt=int_to_byte(frame_bytes[i])
  enc_bits.append(tmp_byt[7])

print(len(enc_bits))

dec_bits=decrypt(enc_bits,stkey1,stkey2)

print(dec_bits[0:16])

dec_bytes=new_bytes(dec_bits)

dig1=dec_bytes[0]
dig2=dec_bytes[1]

print(byte_to_int(dig1))
print(byte_to_int(dig2))

length=byte_to_int(dig1)*10+byte_to_int(dig2)
strg=''

for i in range(length):

  tmp_byt=dec_bytes[i+2]    
  strg=strg+chr(byte_to_int(tmp_byt))

print(strg)

filename = 'song_embed.wav'
wave_obj = sa.WaveObject.from_wave_file(filename)
play_obj = wave_obj.play()
play_obj.wait_done()  # Wait until sound has finished playing

